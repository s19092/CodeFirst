// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ClinDbContext))]
    [Migration("20200524011411_doneMETHODXD")]
    partial class doneMETHODXD
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication1.Models.Medicament", b =>
                {
                    b.Property<int?>("IdMedicament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMedicament");

                    b.ToTable("Medicaments");

                    b.HasData(
                        new
                        {
                            IdMedicament = 1,
                            Description = "XDASD",
                            Name = " jADWQd",
                            Type = "PLOX"
                        },
                        new
                        {
                            IdMedicament = 2,
                            Description = "XDAS12121212121212D",
                            Name = " jADWQDQ2QWR13131313d",
                            Type = "PLO121212121212X"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("WebApplication1.Models.Prescription", b =>
                {
                    b.Property<int?>("IdPrescrition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.HasKey("IdPrescrition");

                    b.HasIndex("ClientId");

                    b.HasIndex("IdDoctor");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("WebApplication1.Models.Prescrition_Medicament", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dose")
                        .HasColumnType("int");

                    b.Property<int?>("IdMedicament")
                        .HasColumnType("int");

                    b.Property<int?>("IdPrescrtiption")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("IdMedicament");

                    b.HasIndex("IdPrescrtiption");

                    b.ToTable("Prescrition_Medicament");
                });

            modelBuilder.Entity("WebApplication1.Models.Client", b =>
                {
                    b.HasBaseType("WebApplication1.Models.Person");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            Birthdate = new DateTime(2020, 5, 24, 3, 14, 11, 215, DateTimeKind.Local).AddTicks(4994)
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "dzban",
                            LastName = "walski",
                            Birthdate = new DateTime(2020, 5, 24, 3, 14, 11, 218, DateTimeKind.Local).AddTicks(8058)
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Doctor", b =>
                {
                    b.HasBaseType("WebApplication1.Models.Person");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            FirstName = "qram",
                            LastName = "wqas",
                            Email = "małpa@@.com"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "qrqweeqw",
                            LastName = "wqaasdsadadss",
                            Email = "małpfqfwqwfwqfqfw@fqfwq.con"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Prescription", b =>
                {
                    b.HasOne("WebApplication1.Models.Client", "Client")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ClientId");

                    b.HasOne("WebApplication1.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdDoctor");
                });

            modelBuilder.Entity("WebApplication1.Models.Prescrition_Medicament", b =>
                {
                    b.HasOne("WebApplication1.Models.Medicament", "Medicament")
                        .WithMany("all")
                        .HasForeignKey("IdMedicament");

                    b.HasOne("WebApplication1.Models.Prescription", "Prescription")
                        .WithMany("all")
                        .HasForeignKey("IdPrescrtiption");
                });
#pragma warning restore 612, 618
        }
    }
}
